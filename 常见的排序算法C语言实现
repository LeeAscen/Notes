#include <stdio.h> 

//快速排序算法
void quickSort(int *a, int left, int right)
{
    if(left >= right) return;
    int i = left; int j = right; int key = a[left];    
    while(i < j)                              
    {
        while(i < j && key <= a[j]) j--;         
        a[i] = a[j];        
        while(i < j && key >= a[i]) i++;         
        a[j] = a[i];
    }     
    a[i] = key;
    quickSort(a, left, i - 1);
    quickSort(a, i + 1, right);
}

//希尔排序
void shellSort(int *a, int size){
	int step = size >> 1;
	while(step != 0){
		for(int i = step; i<size; i++){
			int j = i-step; int key = a[i];
			while(j>=0 && a[j]>a[j+step]){
				a[j+step] = a[j];
				j = j-step;
			}
			a[j+step] = key;
		}
		step >>= 1;
	}
}

//堆调整算法1
void heap_ajust1(int a[], int start, int end){
    int p = start;
    int l = 2*p+1, r = 2*p+2,largest = 0;
    if(l<=end && a[l]>a[p])
        largest = l;
    else
        largest = p;
    if(r<=end && a[r]>a[largest]) largest = r;
    if(largest != p){
        int tmp = a[largest];
        a[largest] = a[p];
        a[p] = tmp;

        heap_ajust1(a, largest, end);
    }else{
        return;
    }
}

//堆调整算法2
void heap_ajust2(int a[], int start, int end)
{
    int c = start;            // 当前(current)节点的位置
    int l = 2*c + 1;        // 左(left)孩子的位置
    int tmp = a[c];            // 当前(current)节点的大小
    for (; l <= end; c=l,l=2*l+1)
    {
        // "l"是左孩子，"l+1"是右孩子
        if ( l < end && a[l] < a[l+1])
            l++;        // 左右两孩子中选择较大者，即m_heap[l+1]
        if (tmp >= a[l])
            break;        // 调整结束
        else            // 交换值
        {
            a[c] = a[l];
            a[l]= tmp;
        }
    }
}

//堆排序算法
void heapSort(int a[], int n){
    int i;
    for(i=n/2-1;i>=0;i--)
        heap_ajust1(a, i, n-1); //heap_ajust2(a, i, n-1);
    for(i = n-1; i>0; i--){
        int t= a[0];
        a[0] = a[i];
        a[i] = t;
        heap_ajust1(a, 0, i-1); //heap_ajust2(a, 0, i-1);
    }
}

//归并排序算法
void merge(int* s, int* t, int start, int mid, int end){
    int i = start, j = mid+1, k = start;
    while(i <= mid && j <= end){
        if(s[i] < s[j])
            t[k++] = s[i++];
        else
            t[k++] = s[j++];
    }
    while(i <= mid ) t[k++] = s[i++];
    while(j <= end ) t[k++] = s[j++];
    for(i=start;i<=end;i++) s[i] = t[i];
}

void mergeSort(int* s, int* t, int start, int end){
    int mid;
    if(start < end){
        mid = (start+end)/2;
        mergeSort(s, t, start, mid);
        mergeSort(s, t, mid+1, end);
        merge(s, t, start, mid, end);
    }
}

  
int main()  
{  
    int a[]={15,25,32,23,1,-4,35,2,-85,42,0,12,26,56,45,12,145,17,25,21};
    int b[20];
    //quickSort(a, 0, 19);
    //shellSort(a,20);
    //heapSort(a,20);
    mergeSort(a, b, 0, 19);
    int i; 
    for(i = 0;i<20;i++){
    	printf("%d ", a[i]);
    }
    printf("\n");
    return 0;     
}  
